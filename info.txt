			ОПИСАНИЕ ВНЕШНИХ ФУНКЦИЙ
int fromChar(char c) { }
	возвращает номер данного символа в алфавите

char fromInt(int i) { }
	по номеру в алфавите возвращает символ

vector<int> translate(string str) { }
	переводит строку в массив номеров каждой соответствующей буквы в алфавите

string translate(vector<int> arr, int length) { }
	массив номеров букв в алфавите переводит в строку символов

int inv(int num, int mod) { }
	возвращает обратное данному число по заданному модулю

int determ(int** Arr, int size) { }
	считает определитель матрицы

int** transp(int** matr, int n) { }
	транспонирование матрицы (для квадратных матриц)

vector<int> summ(vector<int> v1, vector<int> v2) { }
vector<int> delta(vector<int> d, vector<int> vect) { } 
	покоординатная сумма(разность) по модулю двух векторов (используется в некоторых режимах шифрования)

	
			ОПИСАНИЕ КЛАССОВ И ИХ МЕТОДОВ

class Cipher { };
	абстрактный класс, имеющий два чистых виртуальных метода 
	virtual string e(string str) = 0;
	virtual string d(string str) = 0;,
	которые будут переопределены в классах-наследниках (классах-алгоритмах, шифрующих(расшифровывающих) 
	один блок текста)
	Описание этих методов для нижеописанных классов приводиться не будет, потому что суть методов одна и та же.
	
	class Hill : public Cipher { };
		int** A(int** matr, int y, int x) { }
			дружественная классу Hill функция, которая считает алгебраическое дополнение в данной ячейке матрицы
		int** invMatr(int** matr/*size = 8*/) { }
			дружественная классу Hill функция, которая находит обратную данной матрицу
			
	class Skitala : public Cipher { };
	class Vigenere : public Cipher { };
	
class Padding { };
	класс дополнения блоков. 
	Реализовано три типа дополнения блоков: 
	PKCS7 // DD DD DD DD 04 04 04 04
	ANSI X.923 // DD DD DD DD 00 00 00 04
	ISO 10126 / DD DD DD DD 81 A6 23 04 пустые байты заполняются рандомными числами, в последнем ставится число дополненных блоков
	
	string pad(string block) { }
		дополнение до целого блока
	string unpad(string block) { }
		удаление дополненных символов при расшифровке
		
class Mode { };
	абстрактный класс режима шифрования, имеющий два чистых виртуальных метода.
	virtual string e(string str) = 0;
	virtual string d(string str) = 0;,
	которые будут переопределены в классах-наследниках (классах-режимах, которые организуют различные виды сцепления блоков при шифровании)
	Объект этого класса инициализируется объектом класса Cipher.
	Ниже не буду описывать методы e(string str) и d(string str), потому что во всех классах они делают одно и то же (шифруют блок), выбор режима меняет только связь с инициализирующим вектором
		
	class ECB : public Mode { };
	class CBC : public Mode { };
	class OFB : public Mode { };
	class CFB : public Mode { };	
